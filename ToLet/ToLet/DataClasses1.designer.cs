#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToLet
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HomeRentMSDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDurationTable(DurationTable instance);
    partial void UpdateDurationTable(DurationTable instance);
    partial void DeleteDurationTable(DurationTable instance);
    partial void InsertHome_Category(Home_Category instance);
    partial void UpdateHome_Category(Home_Category instance);
    partial void DeleteHome_Category(Home_Category instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertRoomCountTable(RoomCountTable instance);
    partial void UpdateRoomCountTable(RoomCountTable instance);
    partial void DeleteRoomCountTable(RoomCountTable instance);
    partial void InsertTenant_Category(Tenant_Category instance);
    partial void UpdateTenant_Category(Tenant_Category instance);
    partial void DeleteTenant_Category(Tenant_Category instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserInfo(UserInfo instance);
    partial void UpdateUserInfo(UserInfo instance);
    partial void DeleteUserInfo(UserInfo instance);
    partial void InsertProperty(Property instance);
    partial void UpdateProperty(Property instance);
    partial void DeleteProperty(Property instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertTenant(Tenant instance);
    partial void UpdateTenant(Tenant instance);
    partial void DeleteTenant(Tenant instance);
    partial void InsertRent_Range(Rent_Range instance);
    partial void UpdateRent_Range(Rent_Range instance);
    partial void DeleteRent_Range(Rent_Range instance);
    partial void InsertMailTable(MailTable instance);
    partial void UpdateMailTable(MailTable instance);
    partial void DeleteMailTable(MailTable instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ToLet.Properties.Settings.Default.HomeRentMSDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DurationTable> DurationTables
		{
			get
			{
				return this.GetTable<DurationTable>();
			}
		}
		
		public System.Data.Linq.Table<Home_Category> Home_Categories
		{
			get
			{
				return this.GetTable<Home_Category>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<RoomCountTable> RoomCountTables
		{
			get
			{
				return this.GetTable<RoomCountTable>();
			}
		}
		
		public System.Data.Linq.Table<Tenant_Category> Tenant_Categories
		{
			get
			{
				return this.GetTable<Tenant_Category>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserInfo> UserInfos
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<Tenant> Tenants
		{
			get
			{
				return this.GetTable<Tenant>();
			}
		}
		
		public System.Data.Linq.Table<Rent_Range> Rent_Ranges
		{
			get
			{
				return this.GetTable<Rent_Range>();
			}
		}
		
		public System.Data.Linq.Table<MailTable> MailTables
		{
			get
			{
				return this.GetTable<MailTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DurationTable")]
	public partial class DurationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DurationId;
		
		private string _Duration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDurationIdChanging(int value);
    partial void OnDurationIdChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    #endregion
		
		public DurationTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DurationId
		{
			get
			{
				return this._DurationId;
			}
			set
			{
				if ((this._DurationId != value))
				{
					this.OnDurationIdChanging(value);
					this.SendPropertyChanging();
					this._DurationId = value;
					this.SendPropertyChanged("DurationId");
					this.OnDurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="VarChar(50)")]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Home Category]")]
	public partial class Home_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HomeCategoryId;
		
		private string _Home_Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHomeCategoryIdChanging(int value);
    partial void OnHomeCategoryIdChanged();
    partial void OnHome_Category1Changing(string value);
    partial void OnHome_Category1Changed();
    #endregion
		
		public Home_Category()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HomeCategoryId
		{
			get
			{
				return this._HomeCategoryId;
			}
			set
			{
				if ((this._HomeCategoryId != value))
				{
					this.OnHomeCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._HomeCategoryId = value;
					this.SendPropertyChanged("HomeCategoryId");
					this.OnHomeCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Home Category]", Storage="_Home_Category1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Home_Category1
		{
			get
			{
				return this._Home_Category1;
			}
			set
			{
				if ((this._Home_Category1 != value))
				{
					this.OnHome_Category1Changing(value);
					this.SendPropertyChanging();
					this._Home_Category1 = value;
					this.SendPropertyChanged("Home_Category1");
					this.OnHome_Category1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private string _Location_Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnLocation_NameChanging(string value);
    partial void OnLocation_NameChanged();
    #endregion
		
		public Location()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Location Name]", Storage="_Location_Name", DbType="NChar(10)")]
		public string Location_Name
		{
			get
			{
				return this._Location_Name;
			}
			set
			{
				if ((this._Location_Name != value))
				{
					this.OnLocation_NameChanging(value);
					this.SendPropertyChanging();
					this._Location_Name = value;
					this.SendPropertyChanged("Location_Name");
					this.OnLocation_NameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomCountTable")]
	public partial class RoomCountTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomCountId;
		
		private System.Nullable<int> _Room_Count;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomCountIdChanging(int value);
    partial void OnRoomCountIdChanged();
    partial void OnRoom_CountChanging(System.Nullable<int> value);
    partial void OnRoom_CountChanged();
    #endregion
		
		public RoomCountTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomCountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomCountId
		{
			get
			{
				return this._RoomCountId;
			}
			set
			{
				if ((this._RoomCountId != value))
				{
					this.OnRoomCountIdChanging(value);
					this.SendPropertyChanging();
					this._RoomCountId = value;
					this.SendPropertyChanged("RoomCountId");
					this.OnRoomCountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Room Count]", Storage="_Room_Count", DbType="Int")]
		public System.Nullable<int> Room_Count
		{
			get
			{
				return this._Room_Count;
			}
			set
			{
				if ((this._Room_Count != value))
				{
					this.OnRoom_CountChanging(value);
					this.SendPropertyChanging();
					this._Room_Count = value;
					this.SendPropertyChanged("Room_Count");
					this.OnRoom_CountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Tenant Category]")]
	public partial class Tenant_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantCategoryID;
		
		private string _Tenant_Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantCategoryIDChanging(int value);
    partial void OnTenantCategoryIDChanged();
    partial void OnTenant_Category1Changing(string value);
    partial void OnTenant_Category1Changed();
    #endregion
		
		public Tenant_Category()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantCategoryID
		{
			get
			{
				return this._TenantCategoryID;
			}
			set
			{
				if ((this._TenantCategoryID != value))
				{
					this.OnTenantCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._TenantCategoryID = value;
					this.SendPropertyChanged("TenantCategoryID");
					this.OnTenantCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tenant Category]", Storage="_Tenant_Category1", DbType="VarChar(50)")]
		public string Tenant_Category1
		{
			get
			{
				return this._Tenant_Category1;
			}
			set
			{
				if ((this._Tenant_Category1 != value))
				{
					this.OnTenant_Category1Changing(value);
					this.SendPropertyChanging();
					this._Tenant_Category1 = value;
					this.SendPropertyChanged("Tenant_Category1");
					this.OnTenant_Category1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private string _UserCategory;
		
		private EntitySet<UserInfo> _UserInfos;
		
		private EntitySet<Property> _Properties;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<Tenant> _Tenants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserCategoryChanging(string value);
    partial void OnUserCategoryChanged();
    #endregion
		
		public User()
		{
			this._UserInfos = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfos), new Action<UserInfo>(this.detach_UserInfos));
			this._Properties = new EntitySet<Property>(new Action<Property>(this.attach_Properties), new Action<Property>(this.detach_Properties));
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Tenants = new EntitySet<Tenant>(new Action<Tenant>(this.attach_Tenants), new Action<Tenant>(this.detach_Tenants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCategory", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserCategory
		{
			get
			{
				return this._UserCategory;
			}
			set
			{
				if ((this._UserCategory != value))
				{
					this.OnUserCategoryChanging(value);
					this.SendPropertyChanging();
					this._UserCategory = value;
					this.SendPropertyChanged("UserCategory");
					this.OnUserCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInfo", Storage="_UserInfos", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserInfo> UserInfos
		{
			get
			{
				return this._UserInfos;
			}
			set
			{
				this._UserInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Property", Storage="_Properties", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Property> Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				this._Properties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Request", Storage="_Requests", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tenant", Storage="_Tenants", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Tenant> Tenants
		{
			get
			{
				return this._Tenants;
			}
			set
			{
				this._Tenants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tenants(Tenant entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tenants(Tenant entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInfo")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserInfoId;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private int _MobileNo;
		
		private string _Email;
		
		private string _Nid_No;
		
		private string _Address;
		
		private string _Date_of_Birth;
		
		private string _Gender;
		
		private System.Data.Linq.Binary _Profile_Pic;
		
		private int _UserId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserInfoIdChanging(int value);
    partial void OnUserInfoIdChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnMobileNoChanging(int value);
    partial void OnMobileNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNid_NoChanging(string value);
    partial void OnNid_NoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDate_of_BirthChanging(string value);
    partial void OnDate_of_BirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnProfile_PicChanging(System.Data.Linq.Binary value);
    partial void OnProfile_PicChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserInfo()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInfoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserInfoId
		{
			get
			{
				return this._UserInfoId;
			}
			set
			{
				if ((this._UserInfoId != value))
				{
					this.OnUserInfoIdChanging(value);
					this.SendPropertyChanging();
					this._UserInfoId = value;
					this.SendPropertyChanged("UserInfoId");
					this.OnUserInfoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[First Name]", Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Last Name]", Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNo", DbType="Int NOT NULL")]
		public int MobileNo
		{
			get
			{
				return this._MobileNo;
			}
			set
			{
				if ((this._MobileNo != value))
				{
					this.OnMobileNoChanging(value);
					this.SendPropertyChanging();
					this._MobileNo = value;
					this.SendPropertyChanged("MobileNo");
					this.OnMobileNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nid_No", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nid_No
		{
			get
			{
				return this._Nid_No;
			}
			set
			{
				if ((this._Nid_No != value))
				{
					this.OnNid_NoChanging(value);
					this.SendPropertyChanging();
					this._Nid_No = value;
					this.SendPropertyChanged("Nid_No");
					this.OnNid_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_Birth", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Date_of_Birth
		{
			get
			{
				return this._Date_of_Birth;
			}
			set
			{
				if ((this._Date_of_Birth != value))
				{
					this.OnDate_of_BirthChanging(value);
					this.SendPropertyChanging();
					this._Date_of_Birth = value;
					this.SendPropertyChanged("Date_of_Birth");
					this.OnDate_of_BirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Profile Pic]", Storage="_Profile_Pic", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Profile_Pic
		{
			get
			{
				return this._Profile_Pic;
			}
			set
			{
				if ((this._Profile_Pic != value))
				{
					this.OnProfile_PicChanging(value);
					this.SendPropertyChanging();
					this._Profile_Pic = value;
					this.SendPropertyChanged("Profile_Pic");
					this.OnProfile_PicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInfo", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserInfos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserInfos.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropertyId;
		
		private string _HomeCategory;
		
		private string _TenantCategory;
		
		private string _Location;
		
		private int _RoomCount;
		
		private string _Detailed_Address;
		
		private string _Additional_Comments;
		
		private int _RentRangeId;
		
		private System.Data.Linq.Binary _PropertyImage;
		
		private string _PropertyStatus;
		
		private string _Duration;
		
		private int _UserId;
		
		private int _Request_for_rent;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<Tenant> _Tenants;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyIdChanging(int value);
    partial void OnPropertyIdChanged();
    partial void OnHomeCategoryChanging(string value);
    partial void OnHomeCategoryChanged();
    partial void OnTenantCategoryChanging(string value);
    partial void OnTenantCategoryChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnRoomCountChanging(int value);
    partial void OnRoomCountChanged();
    partial void OnDetailed_AddressChanging(string value);
    partial void OnDetailed_AddressChanged();
    partial void OnAdditional_CommentsChanging(string value);
    partial void OnAdditional_CommentsChanged();
    partial void OnRentRangeIdChanging(int value);
    partial void OnRentRangeIdChanged();
    partial void OnPropertyImageChanging(System.Data.Linq.Binary value);
    partial void OnPropertyImageChanged();
    partial void OnPropertyStatusChanging(string value);
    partial void OnPropertyStatusChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRequest_for_rentChanging(int value);
    partial void OnRequest_for_rentChanged();
    #endregion
		
		public Property()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Tenants = new EntitySet<Tenant>(new Action<Tenant>(this.attach_Tenants), new Action<Tenant>(this.detach_Tenants));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeCategory", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HomeCategory
		{
			get
			{
				return this._HomeCategory;
			}
			set
			{
				if ((this._HomeCategory != value))
				{
					this.OnHomeCategoryChanging(value);
					this.SendPropertyChanging();
					this._HomeCategory = value;
					this.SendPropertyChanged("HomeCategory");
					this.OnHomeCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantCategory", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TenantCategory
		{
			get
			{
				return this._TenantCategory;
			}
			set
			{
				if ((this._TenantCategory != value))
				{
					this.OnTenantCategoryChanging(value);
					this.SendPropertyChanging();
					this._TenantCategory = value;
					this.SendPropertyChanged("TenantCategory");
					this.OnTenantCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomCount", DbType="Int NOT NULL")]
		public int RoomCount
		{
			get
			{
				return this._RoomCount;
			}
			set
			{
				if ((this._RoomCount != value))
				{
					this.OnRoomCountChanging(value);
					this.SendPropertyChanging();
					this._RoomCount = value;
					this.SendPropertyChanged("RoomCount");
					this.OnRoomCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Detailed Address]", Storage="_Detailed_Address", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Detailed_Address
		{
			get
			{
				return this._Detailed_Address;
			}
			set
			{
				if ((this._Detailed_Address != value))
				{
					this.OnDetailed_AddressChanging(value);
					this.SendPropertyChanging();
					this._Detailed_Address = value;
					this.SendPropertyChanged("Detailed_Address");
					this.OnDetailed_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Additional Comments]", Storage="_Additional_Comments", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Additional_Comments
		{
			get
			{
				return this._Additional_Comments;
			}
			set
			{
				if ((this._Additional_Comments != value))
				{
					this.OnAdditional_CommentsChanging(value);
					this.SendPropertyChanging();
					this._Additional_Comments = value;
					this.SendPropertyChanged("Additional_Comments");
					this.OnAdditional_CommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentRangeId", DbType="Int NOT NULL")]
		public int RentRangeId
		{
			get
			{
				return this._RentRangeId;
			}
			set
			{
				if ((this._RentRangeId != value))
				{
					this.OnRentRangeIdChanging(value);
					this.SendPropertyChanging();
					this._RentRangeId = value;
					this.SendPropertyChanged("RentRangeId");
					this.OnRentRangeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyImage", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PropertyImage
		{
			get
			{
				return this._PropertyImage;
			}
			set
			{
				if ((this._PropertyImage != value))
				{
					this.OnPropertyImageChanging(value);
					this.SendPropertyChanging();
					this._PropertyImage = value;
					this.SendPropertyChanged("PropertyImage");
					this.OnPropertyImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PropertyStatus
		{
			get
			{
				return this._PropertyStatus;
			}
			set
			{
				if ((this._PropertyStatus != value))
				{
					this.OnPropertyStatusChanging(value);
					this.SendPropertyChanging();
					this._PropertyStatus = value;
					this.SendPropertyChanged("PropertyStatus");
					this.OnPropertyStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Request for rent]", Storage="_Request_for_rent", DbType="Int NOT NULL")]
		public int Request_for_rent
		{
			get
			{
				return this._Request_for_rent;
			}
			set
			{
				if ((this._Request_for_rent != value))
				{
					this.OnRequest_for_rentChanging(value);
					this.SendPropertyChanging();
					this._Request_for_rent = value;
					this.SendPropertyChanged("Request_for_rent");
					this.OnRequest_for_rentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Request", Storage="_Requests", ThisKey="PropertyId", OtherKey="PropertyId")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Tenant", Storage="_Tenants", ThisKey="PropertyId", OtherKey="PropertyId")]
		public EntitySet<Tenant> Tenants
		{
			get
			{
				return this._Tenants;
			}
			set
			{
				this._Tenants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Property", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Properties.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Properties.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_Tenants(Tenant entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Tenants(Tenant entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reqId;
		
		private int _PropertyId;
		
		private int _UserId;
		
		private EntityRef<Property> _Property;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreqIdChanging(int value);
    partial void OnreqIdChanged();
    partial void OnPropertyIdChanging(int value);
    partial void OnPropertyIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public Request()
		{
			this._Property = default(EntityRef<Property>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reqId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int reqId
		{
			get
			{
				return this._reqId;
			}
			set
			{
				if ((this._reqId != value))
				{
					this.OnreqIdChanging(value);
					this.SendPropertyChanging();
					this._reqId = value;
					this.SendPropertyChanged("reqId");
					this.OnreqIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", DbType="Int NOT NULL")]
		public int PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Request", Storage="_Property", ThisKey="PropertyId", OtherKey="PropertyId", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._PropertyId = value.PropertyId;
					}
					else
					{
						this._PropertyId = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Request", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tenant")]
	public partial class Tenant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _UserId;
		
		private int _PropertyId;
		
		private string _Payment_Status;
		
		private EntityRef<Property> _Property;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPropertyIdChanging(int value);
    partial void OnPropertyIdChanged();
    partial void OnPayment_StatusChanging(string value);
    partial void OnPayment_StatusChanged();
    #endregion
		
		public Tenant()
		{
			this._Property = default(EntityRef<Property>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", DbType="Int NOT NULL")]
		public int PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Payment Status]", Storage="_Payment_Status", DbType="VarChar(50)")]
		public string Payment_Status
		{
			get
			{
				return this._Payment_Status;
			}
			set
			{
				if ((this._Payment_Status != value))
				{
					this.OnPayment_StatusChanging(value);
					this.SendPropertyChanging();
					this._Payment_Status = value;
					this.SendPropertyChanged("Payment_Status");
					this.OnPayment_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Tenant", Storage="_Property", ThisKey="PropertyId", OtherKey="PropertyId", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Tenants.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Tenants.Add(this);
						this._PropertyId = value.PropertyId;
					}
					else
					{
						this._PropertyId = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tenant", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tenants.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tenants.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rent Range]")]
	public partial class Rent_Range : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentRangeId;
		
		private string _Rent_Range1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentRangeIdChanging(int value);
    partial void OnRentRangeIdChanged();
    partial void OnRent_Range1Changing(string value);
    partial void OnRent_Range1Changed();
    #endregion
		
		public Rent_Range()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentRangeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentRangeId
		{
			get
			{
				return this._RentRangeId;
			}
			set
			{
				if ((this._RentRangeId != value))
				{
					this.OnRentRangeIdChanging(value);
					this.SendPropertyChanging();
					this._RentRangeId = value;
					this.SendPropertyChanged("RentRangeId");
					this.OnRentRangeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Rent Range]", Storage="_Rent_Range1", DbType="VarChar(100)")]
		public string Rent_Range1
		{
			get
			{
				return this._Rent_Range1;
			}
			set
			{
				if ((this._Rent_Range1 != value))
				{
					this.OnRent_Range1Changing(value);
					this.SendPropertyChanging();
					this._Rent_Range1 = value;
					this.SendPropertyChanged("Rent_Range1");
					this.OnRent_Range1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailTable")]
	public partial class MailTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _fromu;
		
		private string _to;
		
		private string _message;
		
		private System.Nullable<int> _delefrom;
		
		private System.Nullable<int> _deletto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnfromuChanging(string value);
    partial void OnfromuChanged();
    partial void OntoChanging(string value);
    partial void OntoChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OndelefromChanging(System.Nullable<int> value);
    partial void OndelefromChanged();
    partial void OndelettoChanging(System.Nullable<int> value);
    partial void OndelettoChanged();
    #endregion
		
		public MailTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromu", DbType="VarChar(50)")]
		public string fromu
		{
			get
			{
				return this._fromu;
			}
			set
			{
				if ((this._fromu != value))
				{
					this.OnfromuChanging(value);
					this.SendPropertyChanging();
					this._fromu = value;
					this.SendPropertyChanged("fromu");
					this.OnfromuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[to]", Storage="_to", DbType="VarChar(50)")]
		public string to
		{
			get
			{
				return this._to;
			}
			set
			{
				if ((this._to != value))
				{
					this.OntoChanging(value);
					this.SendPropertyChanging();
					this._to = value;
					this.SendPropertyChanged("to");
					this.OntoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="VarChar(MAX)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delefrom", DbType="Int")]
		public System.Nullable<int> delefrom
		{
			get
			{
				return this._delefrom;
			}
			set
			{
				if ((this._delefrom != value))
				{
					this.OndelefromChanging(value);
					this.SendPropertyChanging();
					this._delefrom = value;
					this.SendPropertyChanged("delefrom");
					this.OndelefromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deletto", DbType="Int")]
		public System.Nullable<int> deletto
		{
			get
			{
				return this._deletto;
			}
			set
			{
				if ((this._deletto != value))
				{
					this.OndelettoChanging(value);
					this.SendPropertyChanging();
					this._deletto = value;
					this.SendPropertyChanged("deletto");
					this.OndelettoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
